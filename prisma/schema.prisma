generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model AddRequest {
  id                            Int     @id @default(autoincrement())
  roomId                        String? @db.VarChar(100)
  reqUser                       String  @db.VarChar(50)
  recUser                       String  @db.VarChar(50)
  status                        String  @default("ing") @db.VarChar(25)
  request User    @relation("request", fields: [reqUser], references: [email], onDelete: Cascade)
  receive User    @relation("receive", fields: [recUser], references: [email], onDelete: Cascade)
  room                          Room?   @relation(fields: [roomId], references: [id])

  @@index([recUser], map: "AddRequest_recUser_fkey")
  @@index([reqUser], map: "AddRequest_reqUser_fkey")
  @@index([roomId], map: "AddRequest_roomId_fkey")
}

model BigCategory {
  name           String           @id @db.VarChar(50)
  middleCategory MiddleCategory[]
}

model Chatting {
  id                            Int      @id @default(autoincrement())
  roomId                        String   @db.VarChar(100)
  nickName                      String?  @db.VarChar(50)
  userEmail                     String   @db.VarChar(50)
  createdAt                     DateTime @default(now()) @db.DateTime(0)
  content                       String   @db.Text
  readCount                     Int
  nick  User?    @relation("Chatting_nickNameToUser", fields: [nickName], references: [nickname])
  room                          Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User     @relation("Chatting_userEmailToUser", fields: [userEmail], references: [email])
  event                         Event?

  @@index([nickName], map: "Chatting_nickName_fkey")
  @@index([roomId], map: "Chatting_roomId_fkey")
  @@index([userEmail], map: "Chatting_userEmail_fkey")
}

model Event {
  id            Int            @id @default(autoincrement())
  chattingId    Int            @unique
  category      Int
  userContent   String?        @db.Text
  oppContent    String?        @db.Text
  smallCategory SmallCategory  @relation(fields: [category], references: [id])
  chatting      Chatting       @relation(fields: [chattingId], references: [id], onDelete: Cascade)
  imageInEvent  ImageInEvent[]

  @@index([category], map: "Event_category_fkey")
}

model EventImage {
  filename        String         @id @db.VarChar(255)
  filepath        String         @db.VarChar(255)
  mimetype        String         @db.VarChar(255)
  size            Int
  smallCategoryId Int
  smallCategory   SmallCategory  @relation(fields: [smallCategoryId], references: [id])
  imageInEvent    ImageInEvent[]

  @@index([smallCategoryId], map: "EventImage_smallCategoryId_fkey")
}

model Friend {
  id                      Int      @id @default(autoincrement())
  user1                   String   @db.VarChar(50)
  user2                   String   @db.VarChar(50)
  createdAt               DateTime @default(now()) @db.DateTime(0)
  userOne User     @relation("userOne", fields: [user1], references: [email], onDelete: Cascade)
  userTwo User     @relation("userTwo", fields: [user2], references: [email], onDelete: Cascade)

  @@index([user1], map: "Friend_user1_fkey")
  @@index([user2], map: "Friend_user2_fkey")
}

model ImageInEvent {
  id         Int        @id @default(autoincrement())
  eventId    Int
  file       String     @db.VarChar(255)
  event      Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventImage EventImage @relation(fields: [file], references: [filename], onDelete: Cascade)

  @@index([eventId], map: "ImageInEvent_eventId_fkey")
  @@index([file], map: "ImageInEvent_file_fkey")
}

model JoinRoom {
  id        Int    @id @default(autoincrement())
  roomId    String @db.VarChar(100)
  userEmail String @db.VarChar(50)
  room      Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([roomId], map: "JoinRoom_roomId_fkey")
  @@index([userEmail], map: "JoinRoom_userEmail_fkey")
}

model MiddleCategory {
  name          String          @id @db.VarChar(50)
  bigName       String          @db.VarChar(50)
  bigCategory   BigCategory     @relation(fields: [bigName], references: [name])
  smallCategory SmallCategory[]

  @@index([bigName], map: "MiddleCategory_bigName_fkey")
}

model Room {
  id              String            @id @db.VarChar(100)
  name            String            @db.VarChar(100)
  joinCount       Int
  createdAt       DateTime          @default(now()) @db.DateTime(0)
  publishing      String            @default("ing") @db.VarChar(10)
  
  addRequest      AddRequest[]
  chatting        Chatting[]
  joinRoom        JoinRoom[]
  userSocketToken UserSocketToken[]
}

model SmallCategory {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar(50)
  middleName     String         @db.VarChar(50)
  event          Event[]
  eventImage     EventImage[]
  middleCategory MiddleCategory @relation(fields: [middleName], references: [name])

  @@index([middleName], map: "SmallCategory_middleName_fkey")
}

model User {
  userNumber                          Int              @id @default(autoincrement())
  email                               String?          @unique(map: "email") @db.VarChar(100)
  password                            String?          @db.VarChar(100)
  nickname                            String?          @unique @db.VarChar(100)
  phoneNumber                         String?          @db.VarChar(100)
  age                                 String?          @db.VarChar(100)
  gender                              String?          @db.VarChar(100)
  myMBTI                              String?          @db.VarChar(100)
  myKeyword                           String?          @db.VarChar(100)
  friendMBTI                          String?          @db.VarChar(100)
  friendKeyword                       String?          @db.VarChar(100)
  friendMaxAge                        String?
  friendMinAge                        String?
  friendGender                        String?          @db.VarChar(100)
  userCreated                         DateTime?        @default(now()) @db.DateTime(0)
  userImage                           String?          @default("https://matchingimage.s3.ap-northeast-2.amazonaws.com/defalut_user.png") @db.VarChar(1000)
  userImageKey                        String?          @db.VarChar(1000)
  requestTime                         DateTime?        @default(dbgenerated("'2000-01-01 00:00:00'")) @db.DateTime(0)
  manager                             Boolean?         @default(false)
  suspend                             Boolean?         @default(false)
  request AddRequest[]     @relation("request")
  receive AddRequest[]     @relation("receive")
  chattingEmail    Chatting[]       @relation("Chatting_nickNameToUser")
  chattingNickName   Chatting[]       @relation("Chatting_userEmailToUser")
  userOne           Friend[]         @relation("userOne")
  userTwo           Friend[]         @relation("userTwo")
  joinRoom                            JoinRoom[]
  UserImage                           UserImage[]
  userSocketToken                     UserSocketToken?
}

model UserImage {
  imageNumber  Int       @id @default(autoincrement())
  userNumber   Int?
  imagePath    String?   @db.VarChar(1000)
  imageKey     String?   @db.VarChar(1000)
  imageCreated DateTime? @default(now()) @db.DateTime(0)
  User         User?     @relation(fields: [userNumber], references: [userNumber], onDelete: Cascade, onUpdate: NoAction, map: "image_ibfk_1")

  @@index([userNumber], map: "userNumber")
}

model UserSocketToken {
  userEmail     String  @id @db.VarChar(50)
  socket        String? @db.VarChar(255)
  token         String? @db.VarChar(255)
  connectRoomId String? @db.VarChar(255)
  room          Room?   @relation(fields: [connectRoomId], references: [id])
  user          User    @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([connectRoomId], map: "UserSocketToken_connectRoomId_fkey")
}
